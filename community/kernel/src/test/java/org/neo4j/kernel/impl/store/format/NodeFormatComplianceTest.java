/**
 * Copyright (c) 2002-2014 "Neo Technology,"
 * Network Engine for Objects in Lund AB [http://neotechnology.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.neo4j.kernel.impl.store.format;

import java.io.File;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.neo4j.io.pagecache.impl.standard.StandardPageCache;
import org.neo4j.kernel.DefaultIdGeneratorFactory;
import org.neo4j.kernel.configuration.Config;
import org.neo4j.kernel.impl.nioneo.store.NeoStore;
import org.neo4j.kernel.impl.nioneo.store.NodeRecord;
import org.neo4j.kernel.impl.nioneo.store.NodeStore;
import org.neo4j.kernel.impl.nioneo.store.StoreFactory;
import org.neo4j.kernel.impl.store.Store;
import org.neo4j.kernel.impl.store.impl.TestStoreIdGenerator;
import org.neo4j.kernel.impl.store.standard.StandardStore;
import org.neo4j.kernel.impl.util.StringLogger;
import org.neo4j.kernel.monitoring.Monitors;
import org.neo4j.test.EphemeralFileSystemRule;

import static java.util.Arrays.asList;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.junit.Assert.*;
import static org.neo4j.kernel.impl.store.impl.StoreMatchers.records;

/**
 * Test that the node store format can read and write the format generated by
 * {@link org.neo4j.kernel.impl.nioneo.store.NodeStore}.
 */
public class NodeFormatComplianceTest
{
    @Rule
    public EphemeralFileSystemRule fsRule = new EphemeralFileSystemRule();
    private StandardPageCache pageCache;
    private StoreFactory storeFactory;

    @Before
    public void setup()
    {
        pageCache = new StandardPageCache( fsRule.get(), 1024, 1024 );
        storeFactory = new StoreFactory( StoreFactory.configForStoreDir( new Config(), new File( "/" ) ), new DefaultIdGeneratorFactory(), pageCache, fsRule.get(), StringLogger.DEV_NULL, new Monitors() );
    }

    @Test
    public void readsRecords() throws Throwable
    {
        // Given
        NeoStore neoStore = storeFactory.createNeoStore();
        NodeStore nodeStore = neoStore.getNodeStore();

        NodeRecord expectedRecord = new NodeRecord( nodeStore.nextId(), false, 1, 2 );
        expectedRecord.setInUse( true );
        nodeStore.updateRecord( expectedRecord );
        neoStore.close();

        // When
        StandardStore<NodeRecord, Store.RecordCursor<NodeRecord>> store = new
                StandardStore<>( new NodeStoreFormat(), new File( "/neostore.nodestore" ),
                new TestStoreIdGenerator(), new StandardPageCache( fsRule.get(), 1024, 1024 ), fsRule.get(),
                StringLogger.DEV_NULL );
        store.init();
        store.start();

        // Then
        assertThat( records( store ), equalTo( asList( expectedRecord ) ) );
    }

    @Test
    public void writesRecords() throws Throwable
    {
        // Given
        storeFactory.createNeoStore().close(); // NodeStore wont start unless it's child stores exist, so creat those

        StandardStore<NodeRecord, Store.RecordCursor<NodeRecord>> store = new
                StandardStore<>( new NodeStoreFormat(), new File( "/neostore.nodestore" ),
                new TestStoreIdGenerator(), new StandardPageCache( fsRule.get(), 1024, 1024 ), fsRule.get(),
                StringLogger.DEV_NULL );
        store.init();
        store.start();

        NodeRecord expectedRecord = new NodeRecord( store.allocate(), false, 1, 2 );
        expectedRecord.setInUse( true );

        // When
        store.write( expectedRecord );
        store.stop();
        store.shutdown();

        // Then
        NodeStore nodeStore = storeFactory.newNodeStore();
        NodeRecord record = nodeStore.getRecord( expectedRecord.getId() );
        assertThat( record, equalTo( expectedRecord ) );
    }

}
